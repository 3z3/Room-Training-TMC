RMNM = require "roomnames"   -- Lua file containing tables that translate memory addresses to names
local savestatepath = '..\\GBA\\State\\GLITCHLESSFOLDER\\'
local states_table = {}
local ordered_rooms_glitchless = {}

-- old flaglist from xstraylite
-- local flaglist = {0x2BB1, 0x2C31, 0x2BBC, 0x2BBD, 0x2BBE, 0x2BBF, 0x2A47, 0x2A48, 0x2AEE, 0x2AEF, 0x2C3C, 0x2C3D, 0x2C3E, 0x2C3F, 0x2E9D, 0x2E9E, 0x2E9F, 0x2EA0, 0x2EA1, 0x2EA2, 0x2A60, 0x2A61, 0x2A80, 0x2A81, 0x2A82, 0x2A83, 0x2AA0, 0x2AA1, 0x2AA2, 0x2AA3, 0x2B0E, 0x2B0F, 0x2B10, 0x2B11, 0x2B12, 0x2B13, 0x2B14, 0x2B15, 0x2B16, 0x2B17, 0x2B18, 0x2B19, 0x2B1A, 0x2B1B, 0x2B1C, 0x2B1D, 0x2B1E, 0x2B1F, 0x2B32, 0x2B33, 0x2B34, 0x2B35, 0x2B36, 0x2B37, 0x2B38, 0x2B39, 0x2B3A, 0x2B3B, 0x2B3C, 0x2B3D, 0x2B3E, 0x2B3F, 0x2B40, 0x2B41, 0x2B42, 0x2B43, 0x2B44, 0x2B45, 0x2B46, 0x2B47, 0x2B48, 0x2B49, 0x2B4A, 0x2B4B, 0x2B4C, 0x2B4D, 0x2B4E, 0x2B4F, 0x2C81, 0x2C82, 0x2C83, 0x2C84, 0x2C85, 0x2C86, 0x2C87, 0x2C88, 0x2C89, 0x2C8A, 0x2C8B, 0x2C8C, 0x2C8D, 0x2C8E, 0x2C8F, 0x2C90, 0x2C91, 0x2C92, 0x2C93, 0x2C94, 0x2C95, 0x2C96, 0x2C97, 0x2C98, 0x2C99, 0x2C9A, 0x2C9B, 0x2C9C, 0x2C9E, 0x2C9F, 0x2CA0, 0x2CA1, 0x2CA2, 0x2CA3, 0x2CA4, 0x2CA5, 0x2CA6, 0x2CA7, 0x2CA8, 0x2CB1, 0x2CB2, 0x2CB4, 0x2CBC, 0x2CBD, 0x2CBE, 0x2CBF, 0x2CC0, 0x2CC1, 0x2CC2, 0x2CC3, 0x2CC4, 0x2CC5, 0x2CC6, 0x2CC7, 0x2CC8, 0x2CC9, 0x2CCA, 0x2CCB, 0x2CCC, 0x2CCD, 0x2CCE, 0x2CCF, 0x2CD0, 0x2CD1, 0x2CD2, 0x2CD3, 0x2CD4, 0x2CD5, 0x2CD6, 0x2CD7, 0x2CD8, 0x2CD9, 0x2CDA, 0x2CDB, 0x2CDC, 0x2CDD, 0x2CDE, 0x2CDF, 0x2CE0, 0x2CE1, 0x2CE2, 0x2CE3, 0x2CE4, 0x2CE5, 0x2CE6, 0x2CE7, 0x2CE8, 0x2CE9, 0x2CEA, 0x2CEB, 0x2CEC, 0x2CED, 0x2CEE, 0x2CEF, 0x2CF0, 0x2CF1, 0x2CF2, 0x2CF3, 0x2CF4, 0x2CF5, 0x2CFC, 0x2CFD, 0x2CFE, 0x2CFF, 0x2D00, 0x2D01, 0x2D02, 0x2D03, 0x2D04, 0x2D05, 0x2D06, 0x2D07, 0x2D08, 0x2D09, 0x2D0A, 0x2D0B, 0x2D0C, 0x2D0D, 0x2D0E, 0x2D0F, 0x2D10, 0x2D11, 0x2D12, 0x2D13, 0x2D14, 0x2D1C, 0x2D1D, 0x2D1E, 0x2D1F, 0x2D20, 0x2D21, 0x2D22, 0x2D23, 0x2D24, 0x2D25, 0x2D26, 0x2D27, 0x2D28, 0x2D29, 0x2D2A, 0x2D2B, 0x2D2C, 0x2D3C, 0x2D3D, 0x2D3E, 0x2D3F, 0x2D40, 0x2D41, 0x2D42, 0x2D43, 0x2D44, 0x2D45, 0x2D46, 0x2D54, 0x2D55, 0x2D56, 0x2D57, 0x2D58, 0x2D59, 0x2D5A, 0x2D5B, 0x2D5C, 0x2D6C, 0x2D6D, 0x2D6E, 0x2D6F, 0x2D70, 0x2D71, 0x2D72, 0x2D73, 0x2D74, 0x2D75, 0x2D84, 0x2D85, 0x2D86, 0x2D87, 0x2D88, 0x2D89, 0x2D8A, 0x2D8B, 0x2D8C, 0x2D8D, 0x2D8E, 0x2D8F, 0x2D90, 0x2D91, 0x2D92, 0x2D93, 0x2D94, 0x2D95, 0x2D96, 0x2D97, 0x2D98, 0x2D9C, 0x2D9D, 0x2D9E, 0x2D9F, 0x2DA0, 0x2DA1, 0x2DA2, 0x2DA3, 0x2DA4, 0x2DA5, 0x2DA6, 0x2DA7, 0x2DA8, 0x2DA9, 0x2DAA, 0x2DAB, 0x2DAC, 0x2DB4, 0x2DB5, 0x2DB6, 0x2DB7, 0x2DB8, 0x2DB9, 0x2DBA, 0x2DBB, 0x2DBC, 0x2DBD, 0x2DBE, 0x2DBF, 0x2DC0, 0x2DC1, 0x2DC2, 0x2DC3, 0x2DC4, 0x2DC5, 0x2DC6, 0x2EAD, 0x2EAE, 0x2EAF, 0x2EB0, 0x2EB1, 0x2EB2, 0x2EBD, 0x2EBE, 0x2EBF, 0x2EC0, 0x2EC1, 0x2EC2} -- to fill in with flags

-- new flaglist from flag_read script
local flaglist = {0x2A47, 0x2A48, 0x2C3C, 0x2C3D, 0x2C3E, 0x2C3F, 0x2BBC, 0x2BBD, 0x2BBE, 0x2BBF, 0x2E9D, 0x2E9E, 0x2E9F, 0x2EA0, 0x2EA1, 0x2EA2, 0x2BB1, 0x2C31, 0x2A60, 0x2A61, 0x2A80, 0x2A81, 0x2A82, 0x2A83, 0x2AA0, 0x2AA1, 0x2AA2, 0x2AA3, 0x2B0E, 0x2B0F, 0x2B10, 0x2B11, 0x2B12, 0x2B13, 0x2B14, 0x2B15, 0x2B16, 0x2B17, 0x2B18, 0x2B19, 0x2B1A, 0x2B1B, 0x2B1C, 0x2B1D, 0x2B1E, 0x2B1F, 0x2B32, 0x2B33, 0x2B34, 0x2B35, 0x2B36, 0x2B37, 0x2B38, 0x2B39, 0x2B3A, 0x2B3B, 0x2B3C, 0x2B3D, 0x2B3E, 0x2B3F, 0x2B40, 0x2B41, 0x2B42, 0x2B43, 0x2B44, 0x2B45, 0x2B46, 0x2B48, 0x2B4A, 0x2B4B, 0x2B4C, 0x2B4D, 0x2B4E, 0x2B4F, 0x2C81, 0x2C82, 0x2C83, 0x2C84, 0x2C85, 0x2C86, 0x2C87, 0x2C88, 0x2C89, 0x2C8A, 0x2C8B, 0x2C8C, 0x2C8D, 0x2C8E, 0x2C8F, 0x2C90, 0x2C91, 0x2C92, 0x2C93, 0x2C94, 0x2C95, 0x2C96, 0x2C97, 0x2C98, 0x2C99, 0x2C9A, 0x2C9B, 0x2C9C, 0x2C9E, 0x2C9F, 0x2CA0, 0x2CA1, 0x2CA2, 0x2CA3, 0x2CA4, 0x2CA5, 0x2CA6, 0x2CA7, 0x2CA8, 0x2CB1, 0x2CB2, 0x2CB4, 0x2CBC, 0x2CBD, 0x2CBE, 0x2CBF, 0x2CC0, 0x2CC1, 0x2CC3, 0x2CC4, 0x2CC5, 0x2CC6, 0x2CC9, 0x2CCD, 0x2CCE, 0x2CCF, 0x2CD0, 0x2CD1, 0x2CD2, 0x2CD3, 0x2CD4, 0x2CD5, 0x2CD6, 0x2CD7, 0x2CD8, 0x2CD9, 0x2CDA, 0x2CDB, 0x2CDC, 0x2CDD, 0x2CDE, 0x2CDF, 0x2CE0, 0x2CE1, 0x2CE2, 0x2CE3, 0x2CE4, 0x2CE5, 0x2CE6, 0x2CE7, 0x2CE8, 0x2CE9, 0x2CEA, 0x2CEB, 0x2CEC, 0x2CED, 0x2CEE, 0x2CEF, 0x2CF0, 0x2CF1, 0x2CF2, 0x2CF3, 0x2CF4, 0x2CF5, 0x2CFC, 0x2CFD, 0x2CFE, 0x2CFF, 0x2D00, 0x2D01, 0x2D02, 0x2D03, 0x2D04, 0x2D05, 0x2D06, 0x2D08, 0x2D09, 0x2D0A, 0x2D0B, 0x2D0C, 0x2D0D, 0x2D0E, 0x2D0F, 0x2D10, 0x2D11, 0x2D12, 0x2D13, 0x2D14, 0x2D1C, 0x2D1D, 0x2D1E, 0x2D1F, 0x2D20, 0x2D21, 0x2D22, 0x2D23, 0x2D24, 0x2D25, 0x2D26, 0x2D27, 0x2D28, 0x2D29, 0x2D2A, 0x2D2B, 0x2D2C, 0x2D3C, 0x2D3D, 0x2D3E, 0x2D3F, 0x2D40, 0x2D41, 0x2D42, 0x2D43, 0x2D44, 0x2D45, 0x2D46, 0x2D54, 0x2D55, 0x2D56, 0x2D57, 0x2D58, 0x2D59, 0x2D5A, 0x2D5B, 0x2D5C, 0x2D6C, 0x2D6D, 0x2D6E, 0x2D6F, 0x2D70, 0x2D71, 0x2D72, 0x2D73, 0x2D74, 0x2D75, 0x2D84, 0x2D85, 0x2D86, 0x2D87, 0x2D88, 0x2D89, 0x2D8A, 0x2D8B, 0x2D8C, 0x2D8D, 0x2D8E, 0x2D8F, 0x2D90, 0x2D91, 0x2D92, 0x2D93, 0x2D94, 0x2D95, 0x2D96, 0x2D97, 0x2D98, 0x2D9C, 0x2D9D, 0x2D9E, 0x2D9F, 0x2DA0, 0x2DA1, 0x2DA2, 0x2DA3, 0x2DA4, 0x2DA5, 0x2DA6, 0x2DA7, 0x2DA8, 0x2DA9, 0x2DAA, 0x2DAB, 0x2DAC, 0x2DB4, 0x2DB5, 0x2DB6, 0x2DB7, 0x2DB8, 0x2DB9, 0x2DBA, 0x2DBB, 0x2DBC, 0x2DBD, 0x2DBE, 0x2DBF, 0x2DC0, 0x2DC1, 0x2DC2, 0x2DC3, 0x2DC4, 0x2DC5, 0x2DC6, 0x2EAD, 0x2EAE, 0x2EAF, 0x2EB0, 0x2EB1, 0x2EB2, 0x2EBD, 0x2EBE, 0x2EBF, 0x2EC0, 0x2EC1, 0x2EC2 }

-- addresses in ewram that can have different values when doing the same room twice
local ewram_variable = {0x34491, 0x2A83, 0x2A48, 0x33A90, 0x24054, 0x2CC2, 0x2D07, 0x2CCB, 0x2CCC, 0x2CCA, 0x2CC8, 0x2CC7, 0x2B49, 0x2B47, 0x34493, 0x2ACA, 0x2ACB, 0x2AF4, 0x2AF5, 0x2AEA, 0x2AEB, 0x2AEC, 0x2AED, 0x2AF6, 0x2B00, 0x2B58, 0x2B59, 0x2B5A, 0x2B5B, 0x2B5C, 0x2B5D, 0x2B5E, 0x2B5F, 0x2B60, 0x2B61, 0x2B62, 0x2B63, 0x2B64, 0x2B65, 0x2B66, 0x2B67, 0x2B68, 0x2B69, 0x2B6A, 0x2B6B, 0x2B6C, 0x2B6D, 0x2B6E, 0x2B6F, 0x2B70, 0x2B71, 0x2B72, 0x2B73, 0x2B74, 0x2B75, 0x2B76, 0x2B77, 0x2B78, 0x2B79, 0x2B7A, 0x2B7B, 0x2B7CC, 0x2B7D}

-- some more addresses in iwram
local iwram_variable_1byte = {0x4038, 0x0C00, 0x10AE, 0x1174, 0x10AF, 0x10B4, 0x1744, 0x10D9}
local iwram_variable_2byte = {0x1134, 0x1136, 0x10AC, 0x10B0, 0x10B2, 0x3FB0}
local iwram_variable_4byte = {0x1150}
-- iwram_variable = {["1b"] = {0x4038, 0x0C00, 0x10AE, 0x1174, 0x10AF, 0x10B4, 0x1744, 0x10D9}, ["2b"] = {0x10AC, 0x0B8A, 0x0B8E, 0x0B90, 0x0BF0, 0x0BF2, 0x0BF4, 0x0BF6, 0x0BF8, 0x0BFA, 0x0BFC, 0x0C06, 0x0C0E, 0x0C10, 0x0F50, 0x0F56, 0x0F58, 0x0F5A, 0x0F5C, 0x0F64, 0x0F66, 0x0F68, 0x0F70, 0x0F72, 0x0F74, 0x0F7C, 0x0F7E, 0x0F80, 0x0FB4, 0x0FF0, 0x0FF2, 0x1010, 0x10AA, 0x10B0, 0x10B2, 0x10B8, 0x10BA, 0x10BC, 0x10BE, 0x10C0, 0x10C2, 0x10CF, 0x10D6, 0x10DC, 0x10DD, 0x10DE, 0x10DF, 0x10E0, 0x10E1, 0x10E2, 0x10E3, 0x10E4, 0x10E5, 0x10E6, 0x10E7, 0x10E8, 0x10E9, 0x10EA, 0x10EC, 0x10F4, 0x10FC, 0x110C, 0x110E, 0x1110, 0x1112, 0x1114, 0x1116, 0x1118, 0x111A, 0x111C, 0x111E, 0x1120, 0x1122, 0x1128, 0x112A, 0x1130, 0x1132, 0x1134, 0x1136, 0x114C, 0x1172, 0x1184, 0x118A, 0x118C, 0x118E, 0x1190, 0x1192, 0x1194, 0x1196, 0x11A6, 0x11C0, 0x11DA, 0x1694, 0x17B2, 0x17BA, 0x3F88, 0x3F96, 0x3F98, 0x3FA2, 0x3FA4, 0x3FB0, 0x3FB2, 0x400C, 0x400E, 0x4010, 0x4012, 0x4024, 0x402C, 0x4034, 0x4036}, ["4b"] = {0x0C18, 0x0C1C, 0x0C20, 0x0C24, 0x0F60, 0x0F6C, 0x0F78, 0x0F84, 0x10A0, 0x1150, 0x1160, 0x1164, 0x1180, 0x11A8, 0x11AC, 0x11B0, 0x11B4, 0x11BC, 0x11C4, 0x11D4, 0x17BC, 0x3D70, 0x3D71, 0x3D72, 0x3D73, 0x3D74, 0x3D75, 0x3D76, 0x3D77, 0x3D78, 0x3D79, 0x3D7A, 0x3D7B, 0x3D7C, 0x3D7D, 0x3D7E, 0x3D7F, 0x3D80, 0x3D81, 0x3D82, 0x3D83, 0x3D84, 0x3D85, 0x3D86, 0x3D87, 0x3D88, 0x3D89, 0x3D8A, 0x3D8B, 0x3D8C, 0x3D8D, 0x3D8E, 0x3D8F, 0x3D90, 0x3D91, 0x3D92, 0x3D93, 0x3D94, 0x3D95, 0x3D96, 0x3D97, 0x3D98, 0x3D99, 0x3D9A, 0x3D9B, 0x3D9C, 0x3D9D, 0x3D9E, 0x3D9F, 0x3DA0, 0x3DA1, 0x3DA2, 0x3DA3, 0x3DA4, 0x3DA5, 0x3DA6, 0x3DA7, 0x3DA8, 0x3DA9, 0x3DAA, 0x3DAB, 0x3DAC, 0x3DAD, 0x3DAE, 0x3DAF, 0x3DB0, 0x3DB1, 0x3DB2, 0x3DB3, 0x3DB4, 0x3DE0, 0x3FAC, 0x4004, 0x4040, 0x4044, 0x4048 } }
iwram_variable = {["1b"] = {0x4038, 0x0C00, 0x10AE, 0x1174, 0x10AF, 0x10B4, 0x1744, 0x10D9}, ["2b"] = {0x1134, 0x1136, 0x10AC, 0x10B0, 0x10B2, 0x3FB0}, ["4b"] = {0x1150}}

-- tables to write inside the module
local database = {}
local iwram_database = {}
local ewram_database = {}
local more_ewram = {}
local goals = {}

local name = ""
local previous_name = ""

local current_roomandarea = 0x0
local previous_roomandarea = memory.read_u16_le(0x10AC,"IWRAM")

local current_flags = {}    -- used to compare the difference between them at the end of a room
local previous_flags = {}
local current_iwram = {["1b"] = {}, ["2b"] = {}, ["4b"] = {}}    -- same as before but for some addresses in iwram
local current_ewram = {}

local function scanflags()  -- saves flags and their values to the current_flags table
    for _,address in pairs(flaglist) do
        current_flags[address] = memory.read_u8(address,"EWRAM")    -- is it actually u16 ? how many bytes ? be careful of last 4 bit-valued addresses in the flag list
    end
end

local function scan_iwram()
    local mw1, mw2, mw4 = memory.read_u8, memory.read_u16_le, memory.read_u32_le
    for bytes,addresses in pairs(iwram_variable) do
        for _,addr in pairs(addresses) do
            if bytes == "1b" then
                current_iwram["1b"][addr] = mw1(addr,"IWRAM")
            elseif bytes == "2b" then
                current_iwram["2b"][addr] = mw2(addr,"IWRAM")
            else
                current_iwram["4b"][addr] = mw4(addr,"IWRAM")
            end
        end
    end
end

local function scan_ewram()
    for _,address in pairs(ewram_variable) do
        current_ewram[address] = memory.read_u8(address,"EWRAM")
    end
end

local function copy(some_table)  -- independant copy of a table
    local res = {}
    for key,value in pairs(some_table) do
        res[key] = value
    end
    return res
end

local function copy_iwram(some_table)
    -- special copy function made for iwram, because of its special structure
    local res = {["1b"] = {}, ["2b"] = {}, ["4b"] = {}}
    local loop = {"1b", "2b", "4b"}
    for _,var in ipairs(loop) do
        for key,value in pairs(some_table[var]) do
            res[var][key] = value
        end
    end
    return res
end

local function goals_delta(current,previous)    -- sets up goals for each room
    local goals = {}
    for key,value in pairs(current) do
        if value ~= previous[key] then
            goals[key] = value
        end
    end
    return goals
end

scanflags()
scan_iwram()
scan_ewram()
previous_flags = copy(current_flags)

client.speedmode(500)

while memory.read_u8(0x1744,"IWRAM") ~= 0x0D do -- vaati 3 is dead memory value

    current_roomandarea = memory.read_u16_le(0x10AC,"IWRAM")

    if current_roomandarea ~= previous_roomandarea and memory.read_u8(0x1002,"IWRAM") == 0x02 then -- if room or area changes, save a new savestate with an original name corresponding to room, area and multiples
        scanflags() -- updates current_flags
        scan_iwram()    -- updates the other characteristics wanted from iwram
        scan_ewram()

        local temp_key = string.format("%x",current_roomandarea)
        while string.len(temp_key) < 4 do
            temp_key = '0' .. temp_key  -- room ids can be 00 and such, which is lost in translation to string.format method
        end
        local count = 0
        if states_table[temp_key] == nil then
            states_table[temp_key] = {'state0'}
        else
            for _,_ in ipairs(states_table[temp_key]) do
                count = count + 1
            end
            states_table[temp_key][count+1] = 'state' .. string.format(count)
        end
        -- savestate.save(savestatepath .. temp_key .. 'state' .. string.format(count) .. '.State')    -- saving the savestate with the appropriate name
        name = RMNM.mem_to_areas(string.upper(string.sub(temp_key,3,4))) .. " | " .. RMNM.mem_to_rooms(string.upper(string.sub(temp_key,1,4))) .. " | " .. tostring(count)
        table.insert(ordered_rooms_glitchless,name)
        
        database[name] = copy(current_flags)
        iwram_database[name] = copy_iwram(current_iwram)
        ewram_database[name] = copy(current_ewram)
        if name ~= previous_name then
            goals[previous_name] = goals_delta(current_flags,previous_flags)
        end
        previous_flags = copy(current_flags)    -- must be at the very end of the loop
        previous_name = name
    end

    previous_roomandarea = current_roomandarea

    emu.frameadvance()
end

goals[name] = { [0x2CA6] = 0xEE }   -- E !!! also means youve finished the game + other things you do and dont do in the any% route specifically

-- ran once

local orderedrooms_string = "local orderedrooms = {}\n\n" .. "local ORDERED_ROOMS = { "

for _,name in ipairs(ordered_rooms_glitchless) do
    orderedrooms_string = orderedrooms_string .. '"' .. name .. '", '
end
orderedrooms_string = string.sub(orderedrooms_string,1,-3) .. " }\n\n"

orderedrooms_string = orderedrooms_string .. "function orderedrooms.get_rooms()\n    return ORDERED_ROOMS\n" .. "end\n\n" .. "return orderedrooms"

local newfile = io.open ("orderedrooms.lua", "w")
newfile:write(orderedrooms_string)
newfile:close()

local savestates_string = ''

local function serialize(database_table,variable_name)
    local res_string = 'local ' .. variable_name .. ' = { '

    for name,table in pairs(database_table) do
        res_string = res_string .. '[' .. '"' .. tostring(name) .. '"' .. '] = { '
        local temp_string = ''
        for address,value in pairs(table) do
            temp_string = temp_string .. '[' .. tostring(address) .. '] = ' .. tostring(value) .. ', '
        end
        if string.len(temp_string) == 0 then
            temp_string = 'nil, '
        end
        res_string = res_string .. temp_string
        res_string = string.sub(res_string,1,-3) .. " }, "
    end
    res_string = string.sub(res_string,1,-3) .. " }"

    return res_string
end

local function serialize_iwram(database_table,variable_name)
    local res_string = 'local ' .. variable_name .. ' = { '

    for name,table_name in pairs(database_table) do
        res_string = res_string .. '[' .. '"' .. tostring(name) .. '"' .. '] = { '
        for bytes,table_bytes in pairs(table_name) do
            res_string = res_string .. '[' .. '"' .. tostring(bytes) .. '"' .. '] = { '
            for address,value in pairs(table_bytes) do
                res_string = res_string .. '[' .. tostring(address) .. '] = ' .. tostring(value) .. ', '
            end
            res_string = string.sub(res_string,1,-3) .. " }, "
        end
        res_string = string.sub(res_string,1,-3) .. " }, "
    end
    res_string = string.sub(res_string,1,-3) .. " }"

    return res_string
end

-- setting up the module
savestates_string = 'local anypercent_savestates = {}' .. '\n' .. '\n' .. serialize(database,'DATABASE') .. '\n' .. '\n' .. serialize_iwram(iwram_database,'IWRAM_DATABASE') .. '\n' .. '\n' .. serialize(ewram_database,'EWRAM_DATABASE') .. '\n' .. '\n' .. serialize(goals,'GOALS') .. '\n' .. '\n'

savestates_string = savestates_string .. 'function anypercent_savestates.get_database()\n    return DATABASE\n' .. 'end\n\nfunction anypercent_savestates.get_iwram_database()\n    return IWRAM_DATABASE\n' .. 'end\n\nfunction anypercent_savestates.get_ewram_database()\n    return EWRAM_DATABASE\n' .. 'end\n\nfunction anypercent_savestates.get_goals()\n    return GOALS\n' .. 'end\n\n'

savestates_string = savestates_string .. 'return anypercent_savestates'
-- finished with module

local newfile = io.open ("anypercent_savestates.lua", "w")
newfile:write(savestates_string)
newfile:close()